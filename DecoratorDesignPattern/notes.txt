The Decorator Pattern lets you dynamically add new behavior or responsibilities to objects without modifying their existing code.

Itâ€™s like wrapping the original object inside a new object that adds something extra.

-> ðŸŽ¯ When to Use It
You want to add behavior dynamically at runtime.

You want to follow Open/Closed Principle: open for extension but closed for modification.

Inheritance isnâ€™t flexible enough because itâ€™s static and canâ€™t be changed at runtime.

ðŸ”¥ Advantages:
Follows Open/Closed Principle.

No need to subclass every combination.

Flexible composition at runtime.

ðŸš« Disadvantages:
Lots of small classes.

Can be complex when deeply nested.